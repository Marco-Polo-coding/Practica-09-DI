import{c as C}from"./react.esLmsmu2.js";function H(o,c){let r;try{r=o()}catch{return}return{getItem:a=>{var t;const l=m=>m===null?null:JSON.parse(m,void 0),d=(t=r.getItem(a))!=null?t:null;return d instanceof Promise?d.then(l):l(d)},setItem:(a,t)=>r.setItem(a,JSON.stringify(t,void 0)),removeItem:a=>r.removeItem(a)}}const p=o=>c=>{try{const r=o(c);return r instanceof Promise?r:{then(n){return p(n)(r)},catch(n){return this}}}catch(r){return{then(n){return this},catch(n){return p(n)(r)}}}},q=(o,c)=>(r,n,a)=>{let t={storage:H(()=>localStorage),partialize:e=>e,version:0,merge:(e,h)=>({...h,...e}),...c},l=!1;const d=new Set,m=new Set;let u=t.storage;if(!u)return o((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${t.name}', the given storage is currently unavailable.`),r(...e)},n,a);const y=()=>{const e=t.partialize({...n()});return u.setItem(t.name,{state:e,version:t.version})},_=a.setState;a.setState=(e,h)=>{_(e,h),y()};const g=o((...e)=>{r(...e),y()},n,a);a.getInitialState=()=>g;let f;const S=()=>{var e,h;if(!u)return;l=!1,d.forEach(s=>{var i;return s((i=n())!=null?i:g)});const v=((h=t.onRehydrateStorage)==null?void 0:h.call(t,(e=n())!=null?e:g))||void 0;return p(u.getItem.bind(u))(t.name).then(s=>{if(s)if(typeof s.version=="number"&&s.version!==t.version){if(t.migrate){const i=t.migrate(s.state,s.version);return i instanceof Promise?i.then(I=>[!0,I]):[!0,i]}console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,s.state];return[!1,void 0]}).then(s=>{var i;const[I,b]=s;if(f=t.merge(b,(i=n())!=null?i:g),r(f,!0),I)return y()}).then(()=>{v?.(f,void 0),f=n(),l=!0,m.forEach(s=>s(f))}).catch(s=>{v?.(void 0,s)})};return a.persist={setOptions:e=>{t={...t,...e},e.storage&&(u=e.storage)},clearStorage:()=>{u?.removeItem(t.name)},getOptions:()=>t,rehydrate:()=>S(),hasHydrated:()=>l,onHydrate:e=>(d.add(e),()=>{d.delete(e)}),onFinishHydration:e=>(m.add(e),()=>{m.delete(e)})},t.skipHydration||S(),f||g},F=q,w=C(F((o,c)=>({cartItems:[],addToCart:r=>{const n=c().cartItems.find(a=>a.id===r.id);o(n?a=>({cartItems:a.cartItems.map(t=>t.id===r.id?{...t,quantity:t.quantity+1}:t)}):a=>({cartItems:[...a.cartItems,{...r,quantity:1}]}))},removeFromCart:r=>o(n=>({cartItems:n.cartItems.filter(a=>a.id!==r)})),clearCart:()=>o({cartItems:[]}),getCartTotal:()=>c().cartItems.reduce((r,n)=>r+n.quantity*n.price,0)}),{name:"cart-storage"}));export{w as u};
